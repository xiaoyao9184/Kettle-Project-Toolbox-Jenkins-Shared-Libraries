/**
 * Use Shared Libraries Kettle-Project-Toolbox project pipeline deploy script
 * Created by xiaoyao9184 on 2018/11/21.
 */
@Library('KPT_Shared_Libraries@master') _

pipeline {
    agent any
    parameters {
        string(name: 'ProjectName', description: 'Archive project name!')
        string(name: 'ArchivePath', defaultValue: 'D:/Archive', description: 'Archive directory for find the last archive, format is {ArchivePath}/{ProjectName}/{ArchiveFile}')
        string(name: 'ArchiveRegex', defaultValue: '^.*', description: 'Archive file name filter')

        string(name: 'DeployProfile', defaultValue: 'prod', description: 'The profile for deploy!')
        string(name: 'DeployPath', defaultValue: 'D:/Program/ETL', description: 'Deploy directory for project')
        string(name: 'PDIPath', defaultValue: 'D:/Program/Kettle/data-integration', description: 'The PDI directory!')
        string(name: 'KPTPath', defaultValue: 'D:/Program/Kettle/Kettle-Project-Toolbox', description: 'The KPT directory!')
        string(name: 'PDIURL', defaultValue: 'https://jaist.dl.sourceforge.net/project/pentaho/Data%20Integration/7.1/pdi-ce-7.1.0.0-12.zip', description: 'The PDI URL!')
    }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }
    stages {
        stage('Create info') {
            steps {
                script {
                    archive = null
                    info = [
                        workPath: null,
                        projectPath: null
                    ]
                    flow = [
                        updateKPT: false,
                        downloadPDI: false,
                        applyPatch: false,
                        activeProfile: false,
                        addJenkinsJob: false
                    ]
                }
            }
        }
        stage('Check PDI and KPT') {
            steps {
                library 'KPT_Shared_Libraries@master'
                script {
                    println 'Check kettle tool...'
                    //update KPT when not exist or KPT path is manage by git
                    flow."updateKPT" = deploy.check_path_not_exists_or_manage_by_git("${params.KPTPath}")

                    //download PDI with not exist
                    flow."downloadPDI" = !deploy.check_file_exists("${params.PDIPath}")
                }
            }
        }
        stage('Update KPT') {
            when { 
                expression { flow.updateKPT }
            }
            steps {
                dir("${params.KPTPath}") {
                    echo 'Update KPT...'
                    git branch: 'master',
                        url: 'https://github.com/xiaoyao9184/Kettle-Project-Toolbox.git'
                }
            }
        }
        stage('Download PDI') {
            when { 
                expression { flow.downloadPDI }
            }
            steps {
                echo 'Download PDI...'
                fileOperations([
                    fileDownloadOperation(
                        url: "${params.PDIURL}",
                        targetFileName: 'pdi-ce.zip',
                        targetLocation: "${WORKSPACE}",
                        userName: '',
                        password: ''),
                    fileUnZipOperation(
                        filePath: 'pdi-ce.zip',
                        targetLocation: "."),
                    folderCopyOperation(
                        destinationFolderPath: "${params.PDIPath}",
                        sourceFolderPath: './data-integration'),
                    folderDeleteOperation(
                        './data-integration')
                ])
            }
        }
        stage('Get archive info') {
            when { 
                expression { return params.ProjectName } 
            }
            steps {
                library 'KPT_Shared_Libraries@master'
                script {
                    println 'Get archive info...'
                    def archivePathList = deploy.get_path_list_file_info("${params.ArchivePath}/${params.ProjectName}")
                        .findAll { it.isFile && !it.isHidden }
                        .findAll { it.name.endsWith('.zip') }
                        .findAll { !it.name.contains('syncthing') }
                        .findAll { it.name ==~ "${params.ArchiveRegex}" }
                    if (!archivePathList) {
                        println "No any archive file!"
                        return
                    }

                    def archiveLastFile = archivePathList
                        // https://issues.jenkins-ci.org/browse/JENKINS-44924
                        // .sort{ it.name }
                        .last()

                    println "Last archive is: ${archiveLastFile.absolutePath}"
                    archive = [
                        projectName: "${params.ProjectName}", 
                        file: archiveLastFile.absolutePath,
                        version: archiveLastFile.name.take(archiveLastFile.name.lastIndexOf('.'))
                    ]
                }
            }
        }
        stage('Check archive info') {
            steps {
                script {
                    if (!params.ProjectName) {
                        echo "No 'ProjectName' param!"
                        currentBuild.result = 'UNSTABLE'
                    } else if (!archive) {
                        echo "No archive info!"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Create workspace info') {
            when { 
                expression { return archive } 
            }
            steps {
                library 'KPT_Shared_Libraries@master'
                script {
                    println 'Create workspace info...'
                    info."workPath" = "${params.DeployPath}/${archive.version}"
                    info."projectPath" = "${info.workPath}/${archive.projectName}"
                    
                    def projectPathExists = deploy.check_file_exists("${info.projectPath}")
                    if (projectPathExists) {
                        println "Deploy target path already exists ${info.projectPath}, skip it!"
                        archive = null
                    } else {
                        println "Deploy project path is: ${info.projectPath}"
                    }
                }
            }
        }
        stage('Unzip archive to project path') {
            when { 
                expression { return archive } 
            }
            steps {
                echo 'Unzip archive to project path...'
                fileOperations([
                    fileUnZipOperation(
                        filePath: "${archive.file}",
                        targetLocation: "${info.projectPath}")
                ])
            }
        }
        stage('Check project') {
            when { 
                expression { return archive } 
            }
            steps {
                echo 'Check project path...'
                library 'KPT_Shared_Libraries@master'
                script {
                    def profileFileExists = deploy.check_file_exists("${info.projectPath}/.profile/.profile")
                    if (profileFileExists && params.DeployProfile) {
                        flow."activeProfile" = true
                        println 'Profile needs to be activated!'
                    }

                    def patchFileExists = deploy.check_file_exists("${info.projectPath}/patch.PatchPDI.bat")
                    if (patchFileExists) {
                        flow."applyPatch" = true
                        println 'Patch needs to be applied!'
                    }

                    def jenkinsPathExists = deploy.check_file_exists("${info.projectPath}/jenkins")
                    if (jenkinsPathExists) {
                        flow."addJenkinsJob" = true
                        println 'Patch needs to be applied!'
                    }
                }
            }
        }
        stage('Link PDI and KPT') {
            when { 
                expression { return archive } 
            }
            steps {
                echo 'Link PDI and KPT...'
                bat "call ${params.KPTPath}\\tool\\LINK_KPT.bat ${info.workPath} ${params.PDIPath}".replace("/", "\\")
            }
        }
        stage('Apply PDI patch') {
            when { 
                expression { return archive && flow.applyPatch } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Apply PDI patch...'
                    bat 'call patch.PatchPDI.bat'
                }
            }
        }
        stage('Active project profile') {
            when { 
                expression { return archive && flow.activeProfile } 
            }
            steps {
                echo 'Active project profile...'
                fileOperations([
                    fileRenameOperation(
                        filePath: "${info.projectPath}/.profile/.profile",
                        targetLocation: "${info.projectPath}/.profile/${params.DeployProfile}.profile")
                ])
            }
        }     
        stage('Add Jenkins scheduling job') {
            when { 
                expression { return archive && flow.addJenkinsJob } 
            }
            steps {
                dir("KPTSL") {
                    echo 'Add Jenkins scheduling job...'
                    checkout scm

                    jobDsl(
                        targets: "jenkinsfile/deploy_kpt_project_jenkinsfile.groovy", 
                        removedJobAction: 'DELETE', 
                        removedViewAction: 'DELETE',
                        additionalParameters: [
                            ProjectPath: "${info.projectPath}"
                        ],
                        sandbox: false
                    )
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}